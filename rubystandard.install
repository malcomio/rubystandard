<?php

function rubystandard_install() {


  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(

      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
        'default settings' => array(
          'allowed_html' => '<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <p> <br> <span> <h2> <h3> <h4>',
          'filter_html_help' => 1,
          'filter_html_nofollow' => 0,
        ),
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      'media_filter' => array(
        'weight' => 8,
        'status' => 1,
      ),
      'video_filter' => array(
        'weight' => 9,
        'status' => 1,
      ),
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(

      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'article',
      'name' => st('Article'),
      'base' => 'node_content',
      'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);

  // Create a default vocabulary named "Tags", enabled for the 'article' content type.
  $description = st('Use tags to group articles on similar topics into categories.');
  $help = st('Enter a comma-separated list of words to describe your content.');
  $vocabulary = (object) array(
    'name' => st('Tags'),
    'description' => $description,
    'machine_name' => 'tags',
    'help' => $help,
  );
  taxonomy_vocabulary_save($vocabulary);

  $field = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'type' => 'taxonomy_term_reference',
    // Set cardinality to unlimited for tagging.
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'entity_type' => 'node',
    'label' => 'Tags',
    'bundle' => 'article',
    'description' => $vocabulary->help,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => -4,
    ),
    'display' => array(
      'default' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
      'teaser' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
    ),
  );
  field_create_instance($instance);


  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', $filtered_html_permission));

  $editor_role = new stdClass();
  $editor_role->name = 'editor';
  $editor_role->weight = 2;
  user_role_save($editor_role);
  user_role_grant_permissions($editor_role->rid, array(
    'access content',
    'access administration menu',
    'access administration pages',
    'access all views',
    'access backup and migrate',
    'access backup files',
    'access content',
    'access content overview',
    'access contextual links',
    'access site in maintenance mode',
    'access site reports',
    'access user profiles',
    'administer actions',
    'administer backup and migrate',
    'administer blocks',
    'administer files',
    'administer google analytics',
    'administer image styles',
    'administer menu',
    'administer meta tags',
    'administer nodes',
    'administer permissions',
    'administer search',
    'administer shortcuts',
    'administer software updates',
    'administer taxonomy',
    'block IP addresses',
    'bypass node access',
    'cancel account',
    'change own username',
    'create article content',
    'create page content',
    'create url aliases',
    'customize shortcut links',
    'delete any article content',
    'delete any page content',
    'delete backup files',
    'delete own article content',
    'delete own page content',
    'delete revisions',
    'delete terms in 1',
    'display drupal links',
    'edit any article content',
    'edit any page content',
    'edit meta tags',
    'edit own article content',
    'edit own page content',
    'edit terms in 1',
    'flush caches',
    'import media',
    'opt-in or out of tracking',
    'perform backup',
    'restore from backup',
    'revert revisions',
    'search content',
    'select account cancellation method',
    'switch shortcut sets',
    'use advanced search',
    'use text format filtered_html',
    'view advanced help index',
    'view advanced help popup',
    'view advanced help topic',
    'view file',
    'view own unpublished content',
    'view revisions',
    'view the administration theme',
  ));

  $user_admin_role = new stdClass();
  $user_admin_role->name = 'user manager';
  $user_admin_role->weight = 3;
  user_role_save($user_admin_role);
  user_role_grant_permissions($user_admin_role->rid, array('administer users',));
  // Set this as the administrator role.
  variable_set('user_admin_role', $user_admin_role->rid);




  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 4;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')->fields(array('uid' => 1, 'rid' => $admin_role->rid))->execute();

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => st('Home'),
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Update the menu router information.
  menu_rebuild();

  // Enable the admin theme.
  variable_set('admin_theme', 'rubik');
  variable_set('node_admin_theme', '1');

  // Set up the admin menu.
  variable_set('admin_menu_components', array(
    'admin_menu.icon' => 1,
    'admin_menu.menu' => 1,
    'admin_menu.search' => 1,
    'admin_menu.users' => 1,
    'admin_menu.account' => 1,
    'shortcut.links' => 1,
  ));

  $types = node_type_get_types();
  foreach ($types as $type => $details) {
    // Set revisions on by default.
    variable_set('node_options_' . $type, array(
      'status',
      'revision',
    ));

    // Don't display author and date information.
    if ($type != 'article') {
      variable_set('node_submitted_' . $type, 0);
    }
  }
}